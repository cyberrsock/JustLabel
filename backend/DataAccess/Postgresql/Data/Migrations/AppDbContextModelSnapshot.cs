// <auto-generated />
using System;
using JustLabel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JustLabel.Data.Models.AggregatedDbModel", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("imageid");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("labelid");

                    b.Property<int>("X1")
                        .HasColumnType("integer")
                        .HasColumnName("x1");

                    b.Property<int>("X2")
                        .HasColumnType("integer")
                        .HasColumnName("x2");

                    b.Property<int>("Y1")
                        .HasColumnType("integer")
                        .HasColumnName("y1");

                    b.Property<int>("Y2")
                        .HasColumnType("integer")
                        .HasColumnName("y2");

                    b.HasKey("ImageId", "LabelId");

                    b.ToTable("Aggregated");
                });

            modelBuilder.Entity("JustLabel.Data.Models.AreaDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("labelID");

                    b.Property<int>("X1")
                        .HasColumnType("integer")
                        .HasColumnName("x1");

                    b.Property<int>("X2")
                        .HasColumnType("integer")
                        .HasColumnName("x2");

                    b.Property<int>("Y1")
                        .HasColumnType("integer")
                        .HasColumnName("y1");

                    b.Property<int>("Y2")
                        .HasColumnType("integer")
                        .HasColumnName("y2");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("JustLabel.Data.Models.BannedDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer")
                        .HasColumnName("adminID");

                    b.Property<DateTime>("BanDatetime")
                        .HasColumnType("timestamp")
                        .HasColumnName("banDatetime");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userID");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Banned");
                });

            modelBuilder.Entity("JustLabel.Data.Models.DatasetDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creatorID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LoadDatetime")
                        .HasColumnType("timestamp")
                        .HasColumnName("loadDatetime");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("JustLabel.Data.Models.ImageDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DatasetId")
                        .HasColumnType("integer")
                        .HasColumnName("datasetID");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("JustLabel.Data.Models.LabelDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("JustLabel.Data.Models.LabelSchemeDbModel", b =>
                {
                    b.Property<int>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("labelID");

                    b.Property<int>("SchemeId")
                        .HasColumnType("integer")
                        .HasColumnName("schemeID");

                    b.HasKey("LabelId", "SchemeId");

                    b.HasIndex("SchemeId");

                    b.ToTable("LabelsSchemes");
                });

            modelBuilder.Entity("JustLabel.Data.Models.MarkedAreaDbModel", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("areaID");

                    b.Property<int>("MarkedId")
                        .HasColumnType("integer")
                        .HasColumnName("markedID");

                    b.HasKey("AreaId", "MarkedId");

                    b.HasIndex("MarkedId");

                    b.ToTable("MarksAreas");
                });

            modelBuilder.Entity("JustLabel.Data.Models.MarkedDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("timestamp")
                        .HasColumnName("loadDatetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creatorID");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("imageID");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("isBlocked");

                    b.Property<int>("SchemeId")
                        .HasColumnType("integer")
                        .HasColumnName("schemeID");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ImageId");

                    b.HasIndex("SchemeId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("JustLabel.Data.Models.ReportDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creatorID");

                    b.Property<DateTime>("LoadDatetime")
                        .HasColumnType("timestamp")
                        .HasColumnName("loadDatetime");

                    b.Property<int>("MarkedId")
                        .HasColumnType("integer")
                        .HasColumnName("markedID");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MarkedId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("JustLabel.Data.Models.SchemeDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("timestamp")
                        .HasColumnName("createDatetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creatorID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("JustLabel.Data.Models.UserDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BlockMarks")
                        .HasColumnType("boolean")
                        .HasColumnName("blockMarks");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("isAdmin");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refreshToken");

                    b.Property<string>("Salt")
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JustLabel.Data.Models.AreaDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.LabelDbModel", "Label")
                        .WithMany("Areas")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");
                });

            modelBuilder.Entity("JustLabel.Data.Models.BannedDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.UserDbModel", "Admin")
                        .WithMany("BannedBy")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustLabel.Data.Models.UserDbModel", "User")
                        .WithMany("Banned")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustLabel.Data.Models.DatasetDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.UserDbModel", "User")
                        .WithMany("Datasets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustLabel.Data.Models.ImageDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.DatasetDbModel", "Dataset")
                        .WithMany("Images")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("JustLabel.Data.Models.LabelSchemeDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.LabelDbModel", "Label")
                        .WithMany("LabelsSchemes")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustLabel.Data.Models.SchemeDbModel", "Scheme")
                        .WithMany("LabelsSchemes")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("JustLabel.Data.Models.MarkedAreaDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.AreaDbModel", "Area")
                        .WithMany("MarksAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustLabel.Data.Models.MarkedDbModel", "Mark")
                        .WithMany("MarksAreas")
                        .HasForeignKey("MarkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("JustLabel.Data.Models.MarkedDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.UserDbModel", "User")
                        .WithMany("Marks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustLabel.Data.Models.ImageDbModel", "Image")
                        .WithMany("Marks")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustLabel.Data.Models.SchemeDbModel", "Scheme")
                        .WithMany("Marks")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Scheme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustLabel.Data.Models.ReportDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.UserDbModel", "User")
                        .WithMany("Reports")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JustLabel.Data.Models.MarkedDbModel", "Mark")
                        .WithMany("Reports")
                        .HasForeignKey("MarkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustLabel.Data.Models.SchemeDbModel", b =>
                {
                    b.HasOne("JustLabel.Data.Models.UserDbModel", "User")
                        .WithMany("Schemes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JustLabel.Data.Models.AreaDbModel", b =>
                {
                    b.Navigation("MarksAreas");
                });

            modelBuilder.Entity("JustLabel.Data.Models.DatasetDbModel", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("JustLabel.Data.Models.ImageDbModel", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("JustLabel.Data.Models.LabelDbModel", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("LabelsSchemes");
                });

            modelBuilder.Entity("JustLabel.Data.Models.MarkedDbModel", b =>
                {
                    b.Navigation("MarksAreas");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("JustLabel.Data.Models.SchemeDbModel", b =>
                {
                    b.Navigation("LabelsSchemes");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("JustLabel.Data.Models.UserDbModel", b =>
                {
                    b.Navigation("Banned");

                    b.Navigation("BannedBy");

                    b.Navigation("Datasets");

                    b.Navigation("Marks");

                    b.Navigation("Reports");

                    b.Navigation("Schemes");
                });
#pragma warning restore 612, 618
        }
    }
}
